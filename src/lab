#ifndef WGPU_LAB_MAIN_H
#define WGPU_LAB_MAIN_H

#ifndef LAB_USER_DISABLE_CHRONO_LITERALS
// User may disable `using namespace std::chrono_literals;`
// by `#define LAB_USER_DISABLE_CHRONO_LITERALS` before `#include <lab>`
// It allows for timing based eye candy like auto time = 12ms;
#define LAB_USE_STL_CHRONO_LITERALS
#endif

#include <extra/lab_public.h>

namespace lab {

// -------------------------------------------------------------------------------------------------
// Functions with side-effects, operating on the global application state --------------------------

// Processes GLFW Events, handles open Windows and closes them
//  - generally should be called once per main-loop iteration
//  - returns `true` as long as at least one Window is open
// ```cpp
// while(lab::tick()) {
//   pipeline.render_frame(surface); // render artworks
// }
// ```
bool tick();

// Automatically called by Window and Webgpu constructors
//  - returns `true` if init was successfully performed
//  - only inits once per program invocation
bool init_lab();

// -------------------------------------------------------------------------------------------------
// Utils independent from all other lab-objects ----------------------------------------------------

// Wrapper for visual simplicity around `std::this_thread::sleep_for(duration);`
// - is very inaccurate and should only be used for playing around in different threads for example
// - as far as I understand, it lowers a threads priority in a queue and can lead to longer than
//   expected delays and it probably differs widely on different hardware and OSs
// ```cpp
// lab::sleep(100ms);
// ```
template<class _Rep, class _Period>
inline void sleep(const std::chrono::duration<_Rep, _Period>& d) {
  std::this_thread::sleep_for(d);
}

void restart_timer();
std::chrono::steady_clock::time_point get_timer_start();

template<class T = float>
T elapsed_seconds() {
  return static_cast<T>(static_cast<double>((std::chrono::steady_clock::now() - get_timer_start()).count()) /
                        std::chrono::steady_clock::time_point::period::den);
}

} // namespace lab

#endif // WGPU_LAB_MAIN_H
